// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto
#ifndef GRPC_messages_2eproto__INCLUDED
#define GRPC_messages_2eproto__INCLUDED

#include "messages.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace validator {

// The greeting service definition.
class Validator final {
 public:
  static constexpr char const* service_full_name() {
    return "validator.Validator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status EstablishCon(::grpc::ClientContext* context, const ::validator::IP& request, ::validator::Variables* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>> AsyncEstablishCon(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>>(AsyncEstablishConRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>> PrepareAsyncEstablishCon(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>>(PrepareAsyncEstablishConRaw(context, request, cq));
    }
    virtual ::grpc::Status GiveVariables(::grpc::ClientContext* context, const ::validator::Answer& request, ::validator::Variables* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>> AsyncGiveVariables(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>>(AsyncGiveVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>> PrepareAsyncGiveVariables(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>>(PrepareAsyncGiveVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::validator::Port, ::validator::Recieved>> NewPort(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::validator::Port, ::validator::Recieved>>(NewPortRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::validator::Port, ::validator::Recieved>> AsyncNewPort(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::validator::Port, ::validator::Recieved>>(AsyncNewPortRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::validator::Port, ::validator::Recieved>> PrepareAsyncNewPort(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::validator::Port, ::validator::Recieved>>(PrepareAsyncNewPortRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a greeting
      virtual void EstablishCon(::grpc::ClientContext* context, const ::validator::IP* request, ::validator::Variables* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstablishCon(::grpc::ClientContext* context, const ::validator::IP* request, ::validator::Variables* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GiveVariables(::grpc::ClientContext* context, const ::validator::Answer* request, ::validator::Variables* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GiveVariables(::grpc::ClientContext* context, const ::validator::Answer* request, ::validator::Variables* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NewPort(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::validator::Port,::validator::Recieved>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>* AsyncEstablishConRaw(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>* PrepareAsyncEstablishConRaw(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>* AsyncGiveVariablesRaw(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::validator::Variables>* PrepareAsyncGiveVariablesRaw(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::validator::Port, ::validator::Recieved>* NewPortRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::validator::Port, ::validator::Recieved>* AsyncNewPortRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::validator::Port, ::validator::Recieved>* PrepareAsyncNewPortRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status EstablishCon(::grpc::ClientContext* context, const ::validator::IP& request, ::validator::Variables* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>> AsyncEstablishCon(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>>(AsyncEstablishConRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>> PrepareAsyncEstablishCon(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>>(PrepareAsyncEstablishConRaw(context, request, cq));
    }
    ::grpc::Status GiveVariables(::grpc::ClientContext* context, const ::validator::Answer& request, ::validator::Variables* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>> AsyncGiveVariables(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>>(AsyncGiveVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>> PrepareAsyncGiveVariables(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::validator::Variables>>(PrepareAsyncGiveVariablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::validator::Port, ::validator::Recieved>> NewPort(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::validator::Port, ::validator::Recieved>>(NewPortRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>> AsyncNewPort(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>>(AsyncNewPortRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>> PrepareAsyncNewPort(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>>(PrepareAsyncNewPortRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void EstablishCon(::grpc::ClientContext* context, const ::validator::IP* request, ::validator::Variables* response, std::function<void(::grpc::Status)>) override;
      void EstablishCon(::grpc::ClientContext* context, const ::validator::IP* request, ::validator::Variables* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GiveVariables(::grpc::ClientContext* context, const ::validator::Answer* request, ::validator::Variables* response, std::function<void(::grpc::Status)>) override;
      void GiveVariables(::grpc::ClientContext* context, const ::validator::Answer* request, ::validator::Variables* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewPort(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::validator::Port,::validator::Recieved>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::validator::Variables>* AsyncEstablishConRaw(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::validator::Variables>* PrepareAsyncEstablishConRaw(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::validator::Variables>* AsyncGiveVariablesRaw(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::validator::Variables>* PrepareAsyncGiveVariablesRaw(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::validator::Port, ::validator::Recieved>* NewPortRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>* AsyncNewPortRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>* PrepareAsyncNewPortRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EstablishCon_;
    const ::grpc::internal::RpcMethod rpcmethod_GiveVariables_;
    const ::grpc::internal::RpcMethod rpcmethod_NewPort_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status EstablishCon(::grpc::ServerContext* context, const ::validator::IP* request, ::validator::Variables* response);
    virtual ::grpc::Status GiveVariables(::grpc::ServerContext* context, const ::validator::Answer* request, ::validator::Variables* response);
    virtual ::grpc::Status NewPort(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::validator::Recieved, ::validator::Port>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_EstablishCon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstablishCon() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EstablishCon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishCon(::grpc::ServerContext* /*context*/, const ::validator::IP* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstablishCon(::grpc::ServerContext* context, ::validator::IP* request, ::grpc::ServerAsyncResponseWriter< ::validator::Variables>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GiveVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GiveVariables() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GiveVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GiveVariables(::grpc::ServerContext* /*context*/, const ::validator::Answer* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGiveVariables(::grpc::ServerContext* context, ::validator::Answer* request, ::grpc::ServerAsyncResponseWriter< ::validator::Variables>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewPort() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NewPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPort(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::validator::Recieved, ::validator::Port>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewPort(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::validator::Recieved, ::validator::Port>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EstablishCon<WithAsyncMethod_GiveVariables<WithAsyncMethod_NewPort<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_EstablishCon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EstablishCon() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::validator::IP, ::validator::Variables>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::validator::IP* request, ::validator::Variables* response) { return this->EstablishCon(context, request, response); }));}
    void SetMessageAllocatorFor_EstablishCon(
        ::grpc::MessageAllocator< ::validator::IP, ::validator::Variables>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::validator::IP, ::validator::Variables>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EstablishCon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishCon(::grpc::ServerContext* /*context*/, const ::validator::IP* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstablishCon(
      ::grpc::CallbackServerContext* /*context*/, const ::validator::IP* /*request*/, ::validator::Variables* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GiveVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GiveVariables() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::validator::Answer, ::validator::Variables>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::validator::Answer* request, ::validator::Variables* response) { return this->GiveVariables(context, request, response); }));}
    void SetMessageAllocatorFor_GiveVariables(
        ::grpc::MessageAllocator< ::validator::Answer, ::validator::Variables>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::validator::Answer, ::validator::Variables>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GiveVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GiveVariables(::grpc::ServerContext* /*context*/, const ::validator::Answer* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GiveVariables(
      ::grpc::CallbackServerContext* /*context*/, const ::validator::Answer* /*request*/, ::validator::Variables* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewPort() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::validator::Port, ::validator::Recieved>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->NewPort(context); }));
    }
    ~WithCallbackMethod_NewPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPort(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::validator::Recieved, ::validator::Port>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::validator::Port, ::validator::Recieved>* NewPort(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_EstablishCon<WithCallbackMethod_GiveVariables<WithCallbackMethod_NewPort<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EstablishCon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstablishCon() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EstablishCon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishCon(::grpc::ServerContext* /*context*/, const ::validator::IP* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GiveVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GiveVariables() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GiveVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GiveVariables(::grpc::ServerContext* /*context*/, const ::validator::Answer* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewPort() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NewPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPort(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::validator::Recieved, ::validator::Port>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstablishCon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstablishCon() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EstablishCon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishCon(::grpc::ServerContext* /*context*/, const ::validator::IP* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstablishCon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GiveVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GiveVariables() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GiveVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GiveVariables(::grpc::ServerContext* /*context*/, const ::validator::Answer* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGiveVariables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewPort() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NewPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPort(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::validator::Recieved, ::validator::Port>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewPort(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EstablishCon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EstablishCon() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstablishCon(context, request, response); }));
    }
    ~WithRawCallbackMethod_EstablishCon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishCon(::grpc::ServerContext* /*context*/, const ::validator::IP* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstablishCon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GiveVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GiveVariables() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GiveVariables(context, request, response); }));
    }
    ~WithRawCallbackMethod_GiveVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GiveVariables(::grpc::ServerContext* /*context*/, const ::validator::Answer* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GiveVariables(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewPort() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->NewPort(context); }));
    }
    ~WithRawCallbackMethod_NewPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPort(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::validator::Recieved, ::validator::Port>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* NewPort(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstablishCon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstablishCon() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::validator::IP, ::validator::Variables>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::validator::IP, ::validator::Variables>* streamer) {
                       return this->StreamedEstablishCon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EstablishCon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstablishCon(::grpc::ServerContext* /*context*/, const ::validator::IP* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstablishCon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::validator::IP,::validator::Variables>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GiveVariables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GiveVariables() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::validator::Answer, ::validator::Variables>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::validator::Answer, ::validator::Variables>* streamer) {
                       return this->StreamedGiveVariables(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GiveVariables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GiveVariables(::grpc::ServerContext* /*context*/, const ::validator::Answer* /*request*/, ::validator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGiveVariables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::validator::Answer,::validator::Variables>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EstablishCon<WithStreamedUnaryMethod_GiveVariables<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_EstablishCon<WithStreamedUnaryMethod_GiveVariables<Service > > StreamedService;
};

}  // namespace validator


#endif  // GRPC_messages_2eproto__INCLUDED
