// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto

#include "messages.pb.h"
#include "messages.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace validator {

static const char* Validator_method_names[] = {
  "/validator.Validator/EstablishCon",
  "/validator.Validator/GiveVariables",
  "/validator.Validator/NewPort",
};

std::unique_ptr< Validator::Stub> Validator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Validator::Stub> stub(new Validator::Stub(channel, options));
  return stub;
}

Validator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EstablishCon_(Validator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GiveVariables_(Validator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewPort_(Validator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Validator::Stub::EstablishCon(::grpc::ClientContext* context, const ::validator::IP& request, ::validator::Variables* response) {
  return ::grpc::internal::BlockingUnaryCall< ::validator::IP, ::validator::Variables, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstablishCon_, context, request, response);
}

void Validator::Stub::async::EstablishCon(::grpc::ClientContext* context, const ::validator::IP* request, ::validator::Variables* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::validator::IP, ::validator::Variables, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstablishCon_, context, request, response, std::move(f));
}

void Validator::Stub::async::EstablishCon(::grpc::ClientContext* context, const ::validator::IP* request, ::validator::Variables* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstablishCon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::validator::Variables>* Validator::Stub::PrepareAsyncEstablishConRaw(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::validator::Variables, ::validator::IP, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstablishCon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::validator::Variables>* Validator::Stub::AsyncEstablishConRaw(::grpc::ClientContext* context, const ::validator::IP& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstablishConRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Validator::Stub::GiveVariables(::grpc::ClientContext* context, const ::validator::Answer& request, ::validator::Variables* response) {
  return ::grpc::internal::BlockingUnaryCall< ::validator::Answer, ::validator::Variables, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GiveVariables_, context, request, response);
}

void Validator::Stub::async::GiveVariables(::grpc::ClientContext* context, const ::validator::Answer* request, ::validator::Variables* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::validator::Answer, ::validator::Variables, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GiveVariables_, context, request, response, std::move(f));
}

void Validator::Stub::async::GiveVariables(::grpc::ClientContext* context, const ::validator::Answer* request, ::validator::Variables* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GiveVariables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::validator::Variables>* Validator::Stub::PrepareAsyncGiveVariablesRaw(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::validator::Variables, ::validator::Answer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GiveVariables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::validator::Variables>* Validator::Stub::AsyncGiveVariablesRaw(::grpc::ClientContext* context, const ::validator::Answer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGiveVariablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::validator::Port, ::validator::Recieved>* Validator::Stub::NewPortRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::validator::Port, ::validator::Recieved>::Create(channel_.get(), rpcmethod_NewPort_, context);
}

void Validator::Stub::async::NewPort(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::validator::Port,::validator::Recieved>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::validator::Port,::validator::Recieved>::Create(stub_->channel_.get(), stub_->rpcmethod_NewPort_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>* Validator::Stub::AsyncNewPortRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::validator::Port, ::validator::Recieved>::Create(channel_.get(), cq, rpcmethod_NewPort_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::validator::Port, ::validator::Recieved>* Validator::Stub::PrepareAsyncNewPortRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::validator::Port, ::validator::Recieved>::Create(channel_.get(), cq, rpcmethod_NewPort_, context, false, nullptr);
}

Validator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Validator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Validator::Service, ::validator::IP, ::validator::Variables, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Validator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::validator::IP* req,
             ::validator::Variables* resp) {
               return service->EstablishCon(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Validator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Validator::Service, ::validator::Answer, ::validator::Variables, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Validator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::validator::Answer* req,
             ::validator::Variables* resp) {
               return service->GiveVariables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Validator_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Validator::Service, ::validator::Port, ::validator::Recieved>(
          [](Validator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::validator::Recieved,
             ::validator::Port>* stream) {
               return service->NewPort(ctx, stream);
             }, this)));
}

Validator::Service::~Service() {
}

::grpc::Status Validator::Service::EstablishCon(::grpc::ServerContext* context, const ::validator::IP* request, ::validator::Variables* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Validator::Service::GiveVariables(::grpc::ServerContext* context, const ::validator::Answer* request, ::validator::Variables* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Validator::Service::NewPort(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::validator::Recieved, ::validator::Port>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace validator

